// algo 4.84 selecting a k-bit prime p and a generator.


#include<iostream>
#include<cstdlib>
#include"Basic.h"

using namespace std;

//class GeneratingPrimeNo

int* GeneratingPrimeNo:: toGeneratePrimeNo(int k,int t)
			{
				int* ret = (int*) malloc(2* sizeof(long int));
				long int p,alpha; // p stands for a prime no. choosen.
				int l = 0;
				int i = 0;
				int pass = 1; //pass to control the passing of loop
				RandomSearch rand;
				Factorization fact;
				generator gen; // generator algo also needed.
				while(pass == 1){
						p = rand.randomSearch(k,t); // algo 4.44 to generate a random no.
						cout<<"prime no. generated by algo 4.44 is " << p << endl; //debug statement.
						int* array = fact.factors(p-1); // prime factors are returned to a pointer array.
						//cout<< "factors are calculated"<<endl; // debug statement.
						while(array[i]!=0)
							{  	//cout<< array[i] << endl; // debug statement.
								l++;								
								i++;
							}
						//cout<<"no. of factors are "<<l << endl; // debug statement.
						for(i=0;i<l;i++)
							{
								if(array[i] > t) 
									{
										pass = 0;									
										break;
									}
								
							}
						}
					
					cout<< "prime no. is " << p << endl; // debug statement.
					ret[0] = p;
					alpha = gen.generatorOfCyclic(p,p-1);// generator alpha by algo 4.80
					ret[1] = alpha;
					return ret;
			}
/*
//Driver Program.
int main(){
	GeneratingPrimeNo gpn;
	int* result = gpn.toGeneratePrimeNo(16,1);
	cout<< "prime no. is " << result[0] << endl;
	cout<< "alpha is " << result[1] << endl;
	return 0;
}*/

