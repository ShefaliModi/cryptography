// Random search for a prime using miller-rabin test algo 4.44


#include<iostream>
#include<cstdlib>
#include<cstdio>
#include<ctime>
#include<bitset>
#include<string>
#include"Basic.h"
using namespace std;
//class RandomSearch
//{
//	public:
int RandomSearch:: randomSearch(int k , int t)
			{
				
				int pass = 1; /* pass is used to pass the control to next iteration depending upon if a is divisible by primes or not.*/
				
				long int a;
				primalityTest prim;
				
							std::bitset<16>      x;
							x.set();
							srand(time(NULL));
				 			a = 2*(rand()% ((x.to_ulong() )/2) +1) +1;
							//std::cout<< "random no. a is \t " << a << std::endl;// debug statement.
	                 
										int B[50] = {2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229};
										int i;
										for(i=0;i<50;i++){
											//std::cout<<"a/B[i] is \t " << a/B[i] << endl; // debug statement.
											if(a % B[i] ==0){
													//std::cout<< "a % B[i] is 0 for\t "<< a << " B[i] is " << B[i] << endl; // debug statement.
			 										pass = 0;
													for(i=0;i<clock();i++){}
													randomSearch(k,t);
												}
											}
										 if(pass == 1){
												if(prim.MillerRabin(a,t) == "prime"){
														return a;
													}
													else {
														randomSearch(k,t);
													}
												}
								//cout<< "prime no. generated by algo 4.44 " << a << endl;//debug statement.
					
			}
/*
//Driver program
int main()
{
RandomSearch rand;
std::cout<<"prime no. is "<< rand.randomSearch(16,1) << std::endl;
}*/
